#include <iostream>
#include <vector>
#include <algorithm> 
using namespace std;

bool compareVector(vector<int> i1, vector<int> i2) 
{ 
    return (i1[0] < i2[0]); 
} 

class Solution {
public:
    int earliestAcq(vector<vector<int>>& logs, int n) {
        
        sort(logs.begin(), logs.end(), compareVector); 
        
        /* init */
        for (int i = 0; i < n; i++) {
        	parent.push_back(i);
        	rank.push_back(0);
        }
        /* run */
        for (int i = 0; i < logs.size(); i++) {
            cout << "Time " << logs[i][0] << ": " << logs[i][1] << ", " <<  logs[i][2] << endl;
            Union(logs[i][1], logs[i][2]);
            cout << "  -- status --" << endl;
            for (int j = 0; j < n; j++) {
                cout << " [" << j << "] p = " << parent[j] << ", r = " << rank[j] << endl;
            }
            /* check */
            int first_parent = Find(0);
            bool same_parent = true;
            for (int j = 1; j < n; j++) {
                if (Find(j) != first_parent) {
                    same_parent = false;
                    break;
                }
            }
            if (same_parent) {
                return logs[i][0];
            }
        }
        return -1;
    }
    int Find(int x) {
    	if (parent[x] == x) {
    		return x;
    	} else {
    		int result = Find(parent[x]);
    		parent[x] = result; /* cache for the speed */
    		return result;
    	}
    }
    void Union(int x, int y) {
    	int root_x = Find(x);
    	int root_y = Find(y);
    	if (root_x == root_y) {
    		return;
    	}
    	if (rank[root_x] == rank[root_y]) {
    		parent[root_y] = root_x;
    		rank[root_x]++;
    	} else if (rank[root_x] > rank[root_y]) {
    		parent[root_y] = root_x;
    	} else {
    		parent[root_x] = root_y;
    	}
    }
private:
	vector<int> parent;
	vector<int> rank;
};


int main()
{
	vector<vector<int>> vect
    { 
    	{20190211,1,5},
    	{20190101,0,1},
    	{20190104,3,4},
    	{20190107,2,3},
    	{20190224,2,4},
    	{20190301,0,3},
    	{20190312,1,2},
    	{20190322,4,5}
    };
    Solution S;
    cout << S.earliestAcq(vect, 6) << endl;
	return 0;
}
